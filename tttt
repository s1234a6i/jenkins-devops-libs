Hereâ€™s the end-to-end Angular code for implementing a dynamic chart based on feedback data, incorporating all the logic for features, dropdown selection, and chart updates.

1. Component TypeScript Code

sa-reports.component.ts

import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-sa-reports',
  templateUrl: './sa-reports.component.html',
  styleUrls: ['./sa-reports.component.css']
})
export class SaReportsComponent implements OnInit {
  // Feedback features and their response options
  features = [
    {
      key: 'satisfaction',
      title: 'Feedback Satisfaction',
      options: ['Very Satisfied', 'Satisfied', 'Neutral', 'Dissatisfied', 'Very Dissatisfied']
    },
    {
      key: 'easeOfUse',
      title: 'Ease of Use',
      options: ['Very Easy', 'Easy', 'Neutral', 'Difficult', 'Very Difficult']
    },
    {
      key: 'issueResolved',
      title: 'Issue Resolved',
      options: ['Yes', 'Partially', 'No']
    },
    {
      key: 'recommendationLikelihood',
      title: 'Recommendation Likelihood',
      options: ['Very Likely', 'Likely', 'Neutral', 'Unlikely', 'Very Unlikely']
    }
  ];

  selectedFeature = this.features[0]; // Default to the first feature
  chartOptions: any; // Chart configuration
  feedbackData: any[] = []; // Holds raw feedback data from the API

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.loadFeedbackData();
  }

  // Load feedback data from the API
  loadFeedbackData(): void {
    this.http.get('/v1/admin/smartassistant/getFeedbackData').subscribe((data: any) => {
      this.feedbackData = data; // Store raw feedback data
      this.updateChart(this.selectedFeature.key); // Initialize the chart with the default feature
    });
  }

  // Process feedback data by field and map it to all response options
  processFeedbackDataByField(field: string, options: string[]): any[] {
    const grouped = this.feedbackData.reduce((acc, item) => {
      const value = item[field];
      acc[value] = (acc[value] || 0) + 1;
      return acc;
    }, {});

    return options.map((option) => ({
      label: option,
      count: grouped[option] || 0 // Default to 0 if no data for the option
    }));
  }

  // Update the chart dynamically based on the selected feature
  updateChart(featureKey: string): void {
    const selectedFeature = this.features.find((f) => f.key === featureKey);
    if (selectedFeature) {
      const processedData = this.processFeedbackDataByField(featureKey, selectedFeature.options);
      this.initializeChart(selectedFeature.title, processedData);
      this.selectedFeature = selectedFeature; // Update the selected feature
    }
  }

  // Initialize the chart configuration
  initializeChart(title: string, chartData: any[]): void {
    this.chartOptions = {
      data: chartData,
      title: {
        text: title,
        fontSize: 18
      },
      series: [
        {
          type: 'pie',
          angleKey: 'count',
          labelKey: 'label',
          fills: ['#4caf50', '#8bc34a', '#ffc107', '#ff9800', '#f44336'] // Colors for responses
        }
      ],
      legend: {
        position: 'bottom'
      }
    };
  }
}

2. Component HTML Template

sa-reports.component.html

<div class="reports-container">
  <h2>Feedback Analysis</h2>

  <!-- Dropdown for selecting the feature -->
  <div class="dropdown-container">
    <label for="feature-select">Select Feedback Feature:</label>
    <select id="feature-select" (change)="updateChart($event.target.value)">
      <option *ngFor="let feature of features" [value]="feature.key">
        {{ feature.title }}
      </option>
    </select>
  </div>

  <!-- Chart Container -->
  <div class="chart-container" *ngIf="chartOptions">
    <h3>{{ selectedFeature.title }}</h3>
    <ag-charts-angular
      [options]="chartOptions"
      style="width: 100%; height: 400px;"
    ></ag-charts-angular>
  </div>
</div>

3. Component CSS Styling

sa-reports.component.css

.reports-container {
  padding: 20px;
}

.dropdown-container {
  margin-bottom: 20px;
}

.chart-container {
  padding: 20px;
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

4. Mock API Data

Ensure the API (/v1/admin/smartassistant/getFeedbackData) returns data in the following format:

[
  {
    "id": 1,
    "satisfaction": "Very Satisfied",
    "easeOfUse": "Very Easy",
    "issueResolved": "Yes",
    "recommendationLikelihood": "Very Likely"
  },
  {
    "id": 2,
    "satisfaction": "Neutral",
    "easeOfUse": "Easy",
    "issueResolved": "Partially",
    "recommendationLikelihood": "Likely"
  },
  {
    "id": 3,
    "satisfaction": "Dissatisfied",
    "easeOfUse": "Difficult",
    "issueResolved": "No",
    "recommendationLikelihood": "Unlikely"
  }
]

5. Install Dependencies

Ensure you have the necessary ag-charts-angular package installed:

npm install ag-charts-angular ag-charts-community

6. Add Module Imports

In your Angular module file (app.module.ts), import the Ag-Charts module.

import { AgChartsAngularModule } from 'ag-charts-angular';

@NgModule({
  declarations: [SaReportsComponent],
  imports: [
    BrowserModule,
    HttpClientModule,
    AgChartsAngularModule
  ],
  bootstrap: [AppComponent]
})
export class AppModule {}

Expected Behavior

	1.	A dropdown at the top allows admins to select a feedback feature (e.g., Satisfaction, Ease of Use).
	2.	The chart updates dynamically to display data for the selected feature.
	3.	All response options for the selected feature are included, even if some have no data.
	4.	Consistent color coding is applied across charts for clarity.

Let me know if further adjustments are needed!